##############################  LINUX  #########################################
#
#  For Debian based OS the only thing you have to do is to run:
 
bash check_your_system_linux_debian.sh

#  the script will automatically check if your system is RVmod ready and will
#  ask you to install packages if needed. Particularly you will need:

gfortran
csh
setuptools
pip 
numpy
scipy
matplotlib
PyQt5
PyQt5.QtSvg
qtconsole
jupyter
dill
emcee 
corner 
celerite
batman

# + the swift N-body library, which is actually in the deps directory
#
#  The script works for Python 2 and Python 3, but so far I suggest Python 2 
#  installation (see Detailed instructions)
#  
#  if "check_your_system_linux_debian.sh" was executed with no problems, then
#  you are ready to go! Just type:
# 

python gui.py   


################################  MAC OS  ######################################
# Similar instructions as above are for MAC OS. These are tested and worked 
# straight away on a "clean" Mac OS X installation (Sierra 10.13). Just run:

bash check_your_system_MAC_OS.sh


# Before that you will need to install "homebrew" which requires sudo privileges 
# To install "homebrew", open terminal and type:

/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"



# I had problems with pip install of batman, in particular with the local
# numpy installation.With "pip" install it seems that the numpy headers are here:

/Users/trifontrifonov/Library/Python/2.7/lib/python/site-packages/numpy/core/include/numpy


# Therefore a copy of the header dir fixed the problem

cp -r /Users/trifontrifonov/Library/Python/2.7/lib/python/site-packages/numpy/core/include/numpy /usr/local/include

# If you experineced the same problem after the "cp -r..." run again:

bash check_your_system_MAC_OS.sh

# and all shoud be Ok now! (you may skip the swift instalation if you have
# installed the lib the first time.

################################################################################



#
#       Below are more detailed instructions in case you need more 
#       detailed instalation sequence

################################################################################
########################### Detailed instructions ##############################
################################################################################
#
#
# These instructions are for Ubuntu 16.04+ system running Python 2.7,
# but analogous these should work on other Linux and Mac OS systems. 
#
# I have tried the installation on Virtual machine with Ubuntu 16.04, 
# 18.04 and Lubuntu 18.04 running Python 3 and in general works. However
# there was some stdout piping error with the Python print() functions,
# which I haven't resolved yet.  Therefore, if you reed this, for now I 
# recommend only python2 install.
#  
# Not tried on Windows, yet! 
#
#
################################## Compilers ###################################
#
# Make sure you have at least "gfortran" and "gcc" 5.4+. How to see: 
# gfortran --version, gcc --version
# If you do not have these, then:

sudo apt-get install gfortran 

# (which I think also installs gcc)


################################### Python #####################################
#
# The software should work with Python2 and Python3, although 
# these instructions are for Python2 only.

# you may need "setuptools" and "pip" already installed. If you don't have them:

sudo apt-get install python-setuptools
sudo apt-get install python-pip 


# Then you need "numpy", "matplotlib" and "scipy".
# I usually do a system install on these:

sudo apt-get install python-numpy python-scipy python-matplotlib


# You will need "PyQt5" for the GUI.

sudo apt-get install python-pyqt5 
sudo apt-get install python-pyqt5.qtsvg
sudo apt-get install python-qtconsole 

# you also may need:

sudo apt-get install jupyter


# For session save/load the tool uses "dill". Unfortunately, the RVmod 
# objects cannot be dumped using the included Py system "pickle/cPickle".
# This may be fixed in future, but anyway dill seems very powerful!

sudo pip install dill


# For GP and MCMC analysis
#

sudo pip install emcee
sudo pip install corner 
sudo pip install celerite
 
 
# "batman: Bad-Ass Transit Model cAlculatioN" is used for transit 
# modeling. 

sudo pip install batman-package



# Plotting: pyqtgraph ##############################
#
# There number of well known issues with pyqtgraph which are still not 
# fixed in the stable version. See for example Scatterplot() bug fixes at:
# https://github.com/pyqtgraph/pyqtgraph/pull/412
#
# Therefore, it is advisable to load pyqtgraph from the "addons" directory,
# which contains a custom "pyqtgraph" version with some bugs already fixed.
# No need for installation!

# Otherwise:

sudo pip install pyqtgraph 



##################################### Shells ###################################
#
# "urxvt" is an embedded bash shell which may help the user during the working
# process. This is optional! is not installed it will use "xterm"

sudo apt-get install rxvt


############################## N-body integrator ###############################
#
# A custom "swift" N-body package is included in the root directory.
# follow the instructions there. This is an important part because you need
# the libswift.o library in order to compile not only the N-body integrators
# but also the model minimizers! 


# Swift code can be found here: 
# https://www.boulder.swri.edu/~hal/swift.html
# but you better use the one in the deps directory!!!

# Open README.first and follow the instructions under "COMPILING SWIFT"
 
# After swift lib is installed, compile the fortran fitting codes in the
# "fitting_routines" directory as follow:

gfortran -O3 ../latest_f/kepfit_LM_v1b.f -o chi2_kep -lswift # chi2 keplerian
gfortran -O3 ../latest_f/dynfit_LM_v1b.f -o chi2_dyn -lswift # chi2 dynamical

gfortran -O3 ../latest_f/kepfit_amoeba_v1b.f -o loglik_kep -lswift # lnL keplerian
gfortran -O3 ../latest_f/dynfit_amoeba_v1b.f -o loglik_dyn -lswift # lnL dynamical

# note! I have seen that the -O3 optimization level on some PCs leads to 
# unsatble code for the chi2_dyn minimizing code. If that happen try -O2, or 
#no opt. flag at all! Still always try first with -O3 as it leads to a faster code.

# additionally you must replace the routines in the "stability" directory.
# "cd" to "stability/symba" and


gfortran -O3 latest_f/symba_f/follow_symba2.f -o follow_symba2 -lswift
gfortran -O3 latest_f/symba_f/geninit_j3_in_days.f -o geninit_j3_in_days -lswift
gfortran -O3 latest_f/symba_f/swift_symba5_j.f -o swift_symba5_j -lswift


# If you have Ubuntu/Debian/ or Open_Suse you may simply try:

chmod +x chi2_kep chi2_dyn loglik_kep loglik_dyn

# and in "stability/symba" 

chmod +x follow_symba2 geninit_j3_in_days swift_symba5_j 

# This may, or may not work, so I recommend to compile from source.


############################## Finally #################################

# to load the GUI  + Rvmod 

python gui.py 
 
# if you want to use RVmod on the Python shell


import RVmod as rv # for example see "testing_RV_mod_object_attempt.py"


Comments:

* All fortran and python codes in this version need very 
serious clean up from junk.

* The transit fitting is still not working.

* Many minor and not so minor problems should be fixed. See "focus_matrix_TBFixed.doc"

* Bugs are likely to occur! 










Some credits (more to come)

* The text_editor used in the tool is:

Megasolid Idiom â€” A rich text editor in PyQt
https://github.com/mfitzp/15-minute-apps/tree/master/wordprocessor

* The transit modeling is done with "batman"
 
https://www.cfa.harvard.edu/~lkreidberg/batman/quickstart.html

* GLS periodogram is taken from 

http://www.astro.physik.uni-goettingen.de/~zechmeister/gls.php




